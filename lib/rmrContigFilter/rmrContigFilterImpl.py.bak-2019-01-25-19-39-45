# -*- coding: utf-8 -*-
#BEGIN_HEADER
# The header block is where all import statments should live
import logging
import os
from pprint import pformat

from Bio import SeqIO

from installed_clients.AssemblyUtilClient import AssemblyUtil
from installed_clients.KBaseReportClient import KBaseReport
from installed_clients.DataFileUtilClient import DataFileUtil
#END_HEADER


class rmrContigFilter:
    '''
    Module Name:
    rmrContigFilter

    Module Description:
    A KBase module: rmrContigFilter
This sample module contains one small method that filters contigs.
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "0.0.1"
    GIT_URL = "https://github.com/rroutsong/rmrContigFilter.git"
    GIT_COMMIT_HASH = "1614e8180c09618aa0f3740b3f41795e0d824df8"

    #BEGIN_CLASS_HEADER
    # Class variables and functions can be defined in this block
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR

        # Any configuration parameters that are important should be parsed and
        # saved in the constructor.
        self.callback_url = os.environ['SDK_CALLBACK_URL']
        self.shared_folder = config['scratch']
        logging.basicConfig(format='%(created)s %(levelname)s: %(message)s',
                            level=logging.INFO)
        #END_CONSTRUCTOR
        pass


    def run_rmrContigFilter(self, ctx, params):
        """
        Example app which filters contigs in an assembly using both a minimum contig length
        :param params: instance of mapping from String to unspecified object
        :returns: instance of type "ReportResults" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        # ctx is the context object
        # return variables are: output
        #BEGIN run_rmrContigFilter

        # Print statements to stdout/stderr are captured and available as the App log
        logging.info('Starting run_rmrContigFilter function. Params=' + pformat(params))

        # Step 1 - Parse/examine the parameters and catch any errors
        # It is important to check that parameters exist and are defined, and that nice error
        # messages are returned to users.  Parameter values go through basic validation when
        # defined in a Narrative App, but advanced users or other SDK developers can call
        # this function directly, so validation is still important.
        logging.info('Validating parameters.')
        if 'workspace_name' not in params:
            raise ValueError('Parameter workspace_name is not set in input arguments')
        workspace_name = params['workspace_name']
        if 'assembly_input_ref' not in params:
            raise ValueError('Parameter assembly_input_ref is not set in input arguments')
        assembly_input_ref = params['assembly_input_ref']
        if 'min_length' not in params:
            raise ValueError('Parameter min_length is not set in input arguments')
        min_length_orig = params['min_length']
        min_length = None
        try:
            min_length = int(min_length_orig)
        except ValueError:
            raise ValueError('Cannot parse integer from min_length parameter (' + str(min_length_orig) + ')')
        if min_length < 0:
            raise ValueError('min_length parameter cannot be negative (' + str(min_length) + ')')


        # Step 2 - Download the input data as a Fasta and
        # We can use the AssemblyUtils module to download a FASTA file from our Assembly data object.
        # The return object gives us the path to the file that was created.
        logging.info('Downloading Assembly data as a Fasta file.')
        assemblyUtil = AssemblyUtil(self.callback_url)
        fasta_file = assemblyUtil.get_assembly_as_fasta({'ref': assembly_input_ref})

        # Step 3 - Actually perform the filter operation, saving the good contigs to a new fasta file.
        # We can use BioPython to parse the Fasta file and build and save the output to a file.
        good_contigs = []
        n_total = 0
        n_remaining = 0
        for record in SeqIO.parse(fasta_file['path'], 'fasta'):
            n_total += 1
            if len(record.seq) >= min_length:
                good_contigs.append(record)
                n_remaining += 1

        logging.info('Filtered Assembly to ' + str(n_remaining) + ' contigs out of ' + str(n_total))
        filtered_fasta_file = os.path.join(self.shared_folder, 'filtered.fasta')
        SeqIO.write(good_contigs, filtered_fasta_file, 'fasta')


        # Step 4 - Save the new Assembly back to the system
        logging.info('Uploading filtered Assembly data.')
        new_assembly = assemblyUtil.save_assembly_from_fasta({'file': {'path': filtered_fasta_file},
                                                              'workspace_name': workspace_name,
                                                              'assembly_name': fasta_file['assembly_name']
                                                              })

        # Step 4b - Build html report
        # create html string
        # write string to file to self.shared_folder
        # upload to shock
        # send to report

        html_header = "<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>title</title></head><body><table>"
        html_footer = "</table></body></html>"

        tableentries = "<tr><th>ID</th><th>A %</th><th>C %</th><th>T %</th><th>G %</th></tr>"
        for contig in good_contigs:
            Acount = contig.seq.upper().count('A')
            Ccount = contig.seq.upper().count('C')
            Tcount = contig.seq.upper().count('T')
            Gcount = contig.seq.upper().count('G')
            total = Acount + Ccount + Tcount + Gcount

            Aper = 100*(Acount/total)
            Cper = 100*(Ccount/total)
            Gper = 100*(Gcount/total)
            Tper = 100*(Tcount/total)

            tmprow = "<tr><td>"+contig.id+"</td><td>"+str(round(Aper,2))+"</td><td>"+str(round(Cper,2))+"</td><td>"+str(round(Tper,2))+"</td><td>"+str(round(Gper,2))+"</td></tr>"

            tableentries += tmprow

        # Create the html string
        html_str = html_header + tableentries + html_footer

        # Write the html string to a file in the shared folder
        html_file_dir = os.path.join(self.shared_folder, 'html')
        if not os.path.isdir(html_file_dir):
            os.mkdir(html_file_dir)
        html_file_path = os.path.join(html_file_dir, 'output_table.html')
        html_file = open(html_file_path, "w")
        html_file.write(html_str)
        html_file.close()

        """
        Will try to not use shock first
        # Upload the html file to shock
        dfu = DataFileUtil(self.callback_url)

        try:
            shock_html_upload = dfu.file_to_shock({'file_path': html_file_dir, 'make_handle': 0, 'pack':'zip'})
        except:
            raise ValueError('Unable to upload html file to shock with DataFileUtil')
        """

        # Step 5 - Build a Report and return
        """
        Old Report .create method:
        https://github.com/kbaseapps/KBaseReportPy/blob/master/lib/KBaseReportPy/KBaseReportPyImpl.py

        reportObj = {
            'objects_created': [{'ref': new_assembly, 'description': 'Filtered contigs'}],
            'text_message': 'Filtered Assembly to ' + str(n_remaining) + ' contigs out of ' + str(n_total)
        }
        report = KBaseReport(self.callback_url)
        report_info = report.create({'report': reportObj, 'workspace_name': params['workspace_name']})
        """

        # New report .create_extended_report
        reportObj = {
                'objects_created': [{'ref': new_assembly, 'description': 'Filtered contigs'}],
                'message': 'Filtered Assembly to ' + str(n_remaining) + ' contigs out of ' + str(n_total),
                'direct_html': None,
                'direct_html_link_index': 0,
                'file_links': [],
                #'html_links': [{'shock-id': shock_html_upload['shock_id'], 'name': 'output-table.html', 'label': 'contig table'}],
                'html_links': [{'path': html_file_dir, 'name': 'output_table.html', 'description': 'HTML report for contig filtering' }],
                'workspace_name': params['workspace_name'],
        }

        report = KBaseReport(self.callback_url)
        report_info = report.create_extended_report(reportObj)

        # STEP 6: contruct the output to send back
        output = {
                  'report_name': report_info['name'],
                  'report_ref': report_info['ref'],
                  'assembly_output': new_assembly,
                  'n_initial_contigs': n_total,
                  'n_contigs_removed': n_total - n_remaining,
                  'n_contigs_remaining': n_remaining
        }
        logging.info('returning:' + pformat(output))

        #END run_rmrContigFilter

        # At some point might do deeper type checking...
        if not isinstance(output, dict):
            raise ValueError('Method run_rmrContigFilter return value ' +
                             'output is not type dict as required.')
        # return the results
        return [output]

    def run_rmrContigFilter_max(self, ctx, params):
        """
        New app which filters contigs in an assembly using both a minimum and a maximum contig length
        :param params: instance of mapping from String to unspecified object
        :returns: instance of type "ReportResultsmax" -> structure: parameter
           "output_assembly_ref" of type "assembly_ref", parameter
           "report_name" of String, parameter "report_ref" of String
        """
        # ctx is the context object
        # return variables are: output
        #BEGIN run_rmrContigFilter_max

        # Print statements to stdout/stderr are captured and available as the App log
        logging.info('Starting run_rmrContigFilter function. Params=' + pformat(params))

        # Step 1 - Parse/examine the parameters and catch any errors
        # It is important to check that parameters exist and are defined, and that nice error
        # messages are returned to users.  Parameter values go through basic validation when
        # defined in a Narrative App, but advanced users or other SDK developers can call
        # this function directly, so validation is still important.
        logging.info('Validating parameters.')
        if 'output_workspace' not in params:
            raise ValueError('Parameter output_workspace is not set in input arguments')
        workspace_name = params['output_workspace']
        if 'assembly_input_ref' not in params:
            raise ValueError('Parameter assembly_input_ref is not set in input arguments')
        assembly_input_ref = params['assembly_input_ref']
        if 'min_length' not in params:
            raise ValueError('Parameter min_length is not set in input arguments')
        min_length_orig = params['min_length']
        min_length = None
        try:
            min_length = int(min_length_orig)
        except ValueError:
            raise ValueError('Cannot parse integer from min_length parameter (' + str(min_length_orig) + ')')
        if min_length < 0:
            raise ValueError('min_length parameter cannot be negative (' + str(min_length) + ')')
        if 'max_length' not in params:
            raise ValueError('Parameter max_length is not set in input arguments')
        max_length_orig = params['max_length']
        max_length = None
        try:
            max_length = int(max_length_orig)
        except ValueError:
            raise ValueError('Cannot parse integer from max_length parameter (' + str(max_length_orig) + ')')
        if max_length < 0:
            raise ValueError('max_length parameter cannot be negative (' + str(max_length) + ')')
        if min_length >= max_length:
            raise ValueError('max_length cannot be less than or equal to min_length')

        # Step 2 - Download the input data as a Fasta and
        # We can use the AssemblyUtils module to download a FASTA file from our Assembly data object.
        # The return object gives us the path to the file that was created.
        logging.info('Downloading Assembly data as a Fasta file.')
        assemblyUtil = AssemblyUtil(self.callback_url)
        fasta_file = assemblyUtil.get_assembly_as_fasta({'ref': assembly_input_ref})

        # Step 3 - Actually perform the filter operation, saving the good contigs to a new fasta file.
        # We can use BioPython to parse the Fasta file and build and save the output to a file.
        good_contigs = []
        n_total = 0
        n_remaining = 0
        for record in SeqIO.parse(fasta_file['path'], 'fasta'):
            n_total += 1
            if len(record.seq) >= min_length and len(record.seq) <= max_length:
                good_contigs.append(record)
                n_remaining += 1

        logging.info('Filtered Assembly to ' + str(n_remaining) + ' contigs out of ' + str(n_total))
        filtered_fasta_file = os.path.join(self.shared_folder, 'filtered.fasta')
        SeqIO.write(good_contigs, filtered_fasta_file, 'fasta')

        # Step 4 - Save the new Assembly back to the system
        logging.info('Uploading filtered Assembly data.')
        new_assembly = assemblyUtil.save_assembly_from_fasta({'file': {'path': filtered_fasta_file},
                                                              'workspace_name': workspace_name,
                                                              #'assembly_name': fasta_file['assembly_name']
                                                              'assembly_name': params['output_assembly_name']
                                                             })


        # Step 5 - Build a Report and return
        report = KBaseReport(self.callback_url)

        # This is the old plain text report given in the SDK tutorial
        #reportObj = {
        #    'objects_created': [{'ref': new_assembly, 'description': 'Filtered contigs'}],
        #    'text_message': 'Filtered Assembly to ' + str(n_remaining) + ' contigs out of ' + str(n_total)
        #}

        # This is the old plain text report, we need report.create_extended_report for our new output
        # report_info = report.create({'report': reportObj, 'workspace_name': params['workspace_name']})

        # STEP 6: contruct the output to send back

        # We want to output the new assembly in an assembly viewer, to show the dynamic table
        # associated with the new assembly. We also want to keep our report text.

        report_info = report.create_extended_report({
            "message": 'Filtered Assembly to ' + str(n_remaining) + ' contigs out of ' + str(n_total),
            "objects_created": [{'ref': new_assembly, 'description': 'Filtered contigs'}],
            #"workspace_id": params['workspace_id'],
            "workspace_name": params["output_workspace"]
        })

        output = {
                    'report_name': report_info['name'],
                    'report_ref': report_info['ref'],
                    'output_assembly_name': params["output_assembly_name"],
                    #'n_initial_contigs': n_total,
                    #'n_contigs_removed': n_total - n_remaining,
                    #'n_contigs_remaining': n_remaining,
                    #'workspace_id': params['workspace_id'],
                    #'workspace_id': report_info['ws_id']
        }

        logging.info('returning:' + pformat(output))

        # This will print the ref # to the new assembly created from the filter
        # print("\n\nNEW ASSEMBLY: "+new_assembly+"\n\n")

        #END run_rmrContigFilter_max

        # At some point might do deeper type checking...
        if not isinstance(output, dict):
            raise ValueError('Method run_rmrContigFilter_max return value ' +
                             'output is not type dict as required.')
        # return the results
        return [output]
    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
